@page
@model BlogModel
@using Zengenti.Contensis.Delivery
@using RazorPageLeifExample.Models
@{
    // Connect to the Contensis delivery API
    var client = ContensisClient.Create("leif", "https://cms-zenhub.cloud.contensis.com", "ff258f73-0872-4e75-8f9f-7f6e4471808e", "78b47d9e88954d499dd3c0ca78c7db6e-f1c38cd758454e16b417cccb538ef3ba-8115cc35afa44bf0b458b9260e553f37");

    // Get the id from the querystring
    string BlogId = HttpContext.Request.Query["id"];

    // Get the entry by id and set link depth to 1 to resolve linked content
    var blogPost = client.Entries.Get(BlogId, null, 1);

    // Add blog title to the page title
    ViewData["Title"] = blogPost.Get("entryTitle");

    // Images - add src prefix (Remove when using blocks)
    var imageUrlPrefix = "http://live.leif.zenhub.contensis.cloud";
    var blogImgUrl = imageUrlPrefix + blogPost.Get("thumbnailImage").Asset.Uri;
    var blogAuthorPhotoUrl = imageUrlPrefix + blogPost.Get("author").Get("photo").Asset.Uri;

    // Get the blog post as a typed model
    var blogPostModel = client.Entries.Get<BlogPost>(BlogId, null, 1);

}
<!-- Typed model examples -->
<!--
<p>@blogPostModel.Title</p>
<p>@blogPostModel.LeadParagraph</p>
<p>@blogPostModel.ThumbnailImage.Asset.Uri</p>
<p>@blogPostModel.Author.Name</p>
<p>@blogPostModel.Author.Photo.Asset.Uri</p>
-->

<div class="blog-hero">
  <h1 class="blog-hero__title">
    @blogPost.Get("entryTitle")
  </h1>
  <img class="blog-hero__img" src="@blogImgUrl" alt="@blogPost.Get("thumbnailImage").AltText"/>
</div>
<div class="profile">
  <img class="profile__img" src="@blogAuthorPhotoUrl" alt="@blogPost.Get("author").Get("photo").AltText" />
  <span class="profile__name">
    @blogPost.Get("author").Get("entryTitle")
  </span>
  <span class="category">
    @blogPost.Get("category").Get("entryTitle")
  </span>
</div>
<div class="blog__content">
  <p class="lead">@blogPost.Get("leadParagraph")</p>
  @foreach(ComposedFieldItem item in blogPost.Get("postBody"))
    {
      if (item.Type == "markup")
      {
        <div>@Html.Raw(item.Value<string>())</div>
      }
      if (item.Type == "image")
      {
          var imgUrl = imageUrlPrefix + item.Value().Asset.Uri;
        <div class="inline-img">
          <img class="inline-img__img" src="@imgUrl" alt="@item.Value().AltText"/>
          <div class="inline-img__content">
            <h2 class="inline-img__title">
              @item.Value().Caption
            </h2>
          </div>
        </div>
      }
    }

</div>